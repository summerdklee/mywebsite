[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hello! I’m Dakyung Lee.",
    "section": "",
    "text": "Thanks for visiting my portfolio.\n\n\nPlease enjoy!\n\n\n(..◜ᴗ◝..)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Project",
    "section": "",
    "text": "My recent projects below."
  },
  {
    "objectID": "hw1.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "hw1.html#q1.-다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "lec5 - hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'product' : ['사과', '딸기', '수박'],\n                    'price' : [1800, 1500, 3000],\n                    'sales' : [ 24, 38, 13]})\nprint(df)\n\n  product  price  sales\n0      사과   1800     24\n1      딸기   1500     38\n2      수박   3000     13"
  },
  {
    "objectID": "hw1.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해-보세요.",
    "href": "hw1.html#q2.-앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해-보세요.",
    "title": "lec5 - hw1",
    "section": "",
    "text": "price_mean =  sum(df['price'] / 3)\nsales_mean = sum(df['sales'] / 3)\n\nprint(price_mean)\nprint(sales_mean)\n\n2100.0\n25.0"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "HW1 - LS BigData School",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'product' : ['사과', '딸기', '수박'],\n                    'price' : [1800, 1500, 3000],\n                    'sales' : [ 24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\nproduct\nprice\nsales\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\nprice_mean =  sum(df['price'] / 3)\nsales_mean = sum(df['sales'] / 3)\n\nprice_mean\nsales_mean\n\n25.0"
  },
  {
    "objectID": "hw1.html#p",
    "href": "hw1.html#p",
    "title": "HW1 - LS BigData School",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'product' : ['사과', '딸기', '수박'],\n                    'price' : [1800, 1500, 3000],\n                    'sales' : [ 24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\nproduct\nprice\nsales\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\nprice_mean =  sum(df['price'] / 3)\nsales_mean = sum(df['sales'] / 3)\n\nprice_mean\nsales_mean\n\n25.0"
  },
  {
    "objectID": "hw1.html#p-1",
    "href": "hw1.html#p-1",
    "title": "HW1 - LS BigData School",
    "section": "115p",
    "text": "115p\n\nQ1. mpg 데이터를 불러와 복사본을 만드세요.\n\nimport pydataset\n\ndf_mpg = pydataset.data('mpg')\ndf_mpg_new = df_mpg.copy()\ndf_mpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n1\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n2\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n4\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n5\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n234\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\ndf_mpg_new = df_mpg_new.rename(columns = {'cty' : 'city'})\ndf_mpg_new = df_mpg_new.rename(columns = {'hwy' : 'highway'})\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.\n\ndf_mpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\nclass\n\n\n\n\n1\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n2\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n4\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n5\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "hw1.html#p-2",
    "href": "hw1.html#p-2",
    "title": "HW1 - LS BigData School",
    "section": "130p",
    "text": "130p\n\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\ndf_mw = pd.read_csv('data/midwest.csv')\n\ndf_mw.info()\ndf_mw.head()\ndf_mw.tail()\ndf_mw.shape\ndf_mw.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\n\n\nQ2. poptotal(전체 인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\ndf_mw = df_mw.rename(columns = {'poptotal' : 'total'})\ndf_mw = df_mw.rename(columns = {'popasian' : 'asian'})\n\ndf_mw.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n19.631392\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n11.243308\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n17.033819\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n17.278954\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n14.475999\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n\n\n\n\n5 rows × 28 columns\n\n\n\n\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\ndf_mw['per_asian'] = (df_mw['asian'] / df_mw['total']) * 100\ndf_mw\n\ndf_mw['per_asian'].plot.hist()\n\n\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 large, 그 외에는 small을 부여한 파생변수를 만들어 보세요.\n\nper_asian_mean = df_mw['per_asian'].mean()\nper_asian_mean\n\nimport numpy as np\ndf_mw['SmallLarge'] = np.where(df_mw['per_asian'] &gt; per_asian_mean, 'large', 'small')\ndf_mw\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nper_asian\nSmallLarge\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\nlarge\n\n\n\n\n437 rows × 30 columns\n\n\n\n\n\nQ5. large와 small에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\n# 빈도표\ndf_mw['SmallLarge'].value_counts()\n\n# 빈도 막대 그래프\ncount_sl = df_mw['SmallLarge'].value_counts()\ncount_sl.plot.bar(rot = 0)"
  },
  {
    "objectID": "hw2.html",
    "href": "hw2.html",
    "title": "HW2 - LS BigData School",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nmpg = pd.read_csv('data/mpg.csv')\n\nlow_displ = mpg.query('displ &lt;= 4')\nhigh_displ = mpg.query('displ &gt;= 5')\n\nlow_displ['hwy'].mean()\nhigh_displ['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n\n\n\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\n\naudi['cty'].mean()\ntoyota['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\n\n\n\n\ncfh = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncfh['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "hw2.html#p",
    "href": "hw2.html#p",
    "title": "HW2 - LS BigData School",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nmpg = pd.read_csv('data/mpg.csv')\n\nlow_displ = mpg.query('displ &lt;= 4')\nhigh_displ = mpg.query('displ &gt;= 5')\n\nlow_displ['hwy'].mean()\nhigh_displ['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n\n\n\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\n\naudi['cty'].mean()\ntoyota['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\n\n\n\n\ncfh = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncfh['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "hw2.html#p-1",
    "href": "hw2.html#p-1",
    "title": "HW2 - LS BigData School",
    "section": "153p",
    "text": "153p\n\nQ1. audi에서 생성한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. audi에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\n# audi = mpg.query('manufacturer == \"audi\"')\naudi.sort_values('hwy', ascending = False).head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "hw2.html#p-2",
    "href": "hw2.html#p-2",
    "title": "HW2 - LS BigData School",
    "section": "158p",
    "text": "158p\n\nQ1. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg_cp = mpg.copy()\n\nmpg_cp = mpg_cp.assign(ch_sum = mpg_cp['cty'] + mpg_cp['hwy']) # 혹은 mpg_cp['ch_sum'] = (mpg_cp['cty'] + mpg_cp['hwy'])\n\nmpg_cp\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nch_sum\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg_cp = mpg_cp.assign(ch_mean = mpg_cp['ch_sum'] / 2)\n\nmpg_cp\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nch_sum\nch_mean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg_cp.sort_values('ch_mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nch_sum\nch_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.\n\nmpg = mpg.assign(ch_sum = lambda x: x['cty'] + x['hwy'],\n                 ch_mean = lambda x: x['ch_sum'] / 2) \\\n         .sort_values('ch_mean', ascending = False) \\\n         .head(3)\n\nmpg\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nch_sum\nch_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "LS BigData School",
    "section": "",
    "text": "TEAM PROJECT 1\n\n\n\n\n\n\n\n\n\n\n\nJul 24, 2024\n\n\n5조(내이름은코난탐정이조)\n\n\n\n\n\n\n\n\n\n\n\n\nHW3\n\n\n\n\n\n\n\n\n\n\n\nJul 22, 2024\n\n\nDakyung Lee\n\n\n\n\n\n\n\n\n\n\n\n\nHW2\n\n\n\n\n\n\n\n\n\n\n\nJul 16, 2024\n\n\nDakyung Lee\n\n\n\n\n\n\n\n\n\n\n\n\nHW1\n\n\n\n\n\n\n\n\n\n\n\nJul 15, 2024\n\n\nDakyung Lee\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "HW1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'product' : ['사과', '딸기', '수박'],\n                    'price' : [1800, 1500, 3000],\n                    'sales' : [ 24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\nproduct\nprice\nsales\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\nprice_mean =  sum(df['price'] / 3)\nsales_mean = sum(df['sales'] / 3)\n\nprice_mean\nsales_mean\n\n25.0"
  },
  {
    "objectID": "posts/hw1/index.html#p",
    "href": "posts/hw1/index.html#p",
    "title": "HW1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'product' : ['사과', '딸기', '수박'],\n                    'price' : [1800, 1500, 3000],\n                    'sales' : [ 24, 38, 13]})\ndf\n\n\n\n\n\n\n\n\nproduct\nprice\nsales\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13\n\n\n\n\n\n\n\n\n\n\n\nprice_mean =  sum(df['price'] / 3)\nsales_mean = sum(df['sales'] / 3)\n\nprice_mean\nsales_mean\n\n25.0"
  },
  {
    "objectID": "posts/hw1/index.html#p-1",
    "href": "posts/hw1/index.html#p-1",
    "title": "HW1",
    "section": "115p",
    "text": "115p\n\nQ1. mpg 데이터를 불러와 복사본을 만드세요.\n\nimport pydataset\n\ndf_mpg = pydataset.data('mpg')\ndf_mpg_new = df_mpg.copy()\ndf_mpg_new\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n1\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n2\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n4\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n5\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n234\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns\n\n\n\n\n\nQ2. 복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\ndf_mpg_new = df_mpg_new.rename(columns = {'cty' : 'city'})\ndf_mpg_new = df_mpg_new.rename(columns = {'hwy' : 'highway'})\n\n\n\nQ3. 데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요.\n\ndf_mpg_new.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\nclass\n\n\n\n\n1\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n2\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n4\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n5\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/hw1/index.html#p-2",
    "href": "posts/hw1/index.html#p-2",
    "title": "HW1",
    "section": "130p",
    "text": "130p\n\nQ1. midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\ndf_mw = pd.read_csv('../data/midwest.csv')\n\ndf_mw.info()\ndf_mw.head()\ndf_mw.tail()\ndf_mw.shape\ndf_mw.describe()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n\n\n\n\n\n\n\nPID\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\npopother\npercwhite\n...\nperchsd\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\n\n\n\n\ncount\n437.000000\n437.000000\n4.370000e+02\n437.000000\n4.370000e+02\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n...\n437.000000\n437.000000\n437.000000\n4.370000e+02\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n437.000000\n\n\nmean\n1437.338673\n0.033169\n9.613030e+04\n3097.742985\n8.183992e+04\n1.102388e+04\n343.109840\n1310.464531\n1612.931350\n95.558441\n...\n73.965546\n18.272736\n4.447259\n9.364228e+04\n97.110267\n12.510505\n16.447464\n10.918798\n11.389043\n0.343249\n\n\nstd\n876.390266\n0.014679\n2.981705e+05\n7664.751786\n2.001966e+05\n7.895827e+04\n868.926751\n9518.394189\n18526.540699\n7.087358\n...\n5.843177\n6.261908\n2.408427\n2.932351e+05\n2.749863\n5.150155\n7.228634\n5.109166\n3.661259\n0.475338\n\n\nmin\n561.000000\n0.005000\n1.701000e+03\n85.050000\n4.160000e+02\n0.000000e+00\n4.000000\n0.000000\n0.000000\n10.694087\n...\n46.912261\n7.336108\n0.520291\n1.696000e+03\n80.902441\n2.180168\n1.918955\n1.938504\n3.547067\n0.000000\n\n\n25%\n670.000000\n0.024000\n1.884000e+04\n622.407407\n1.863000e+04\n2.900000e+01\n44.000000\n35.000000\n20.000000\n94.886032\n...\n71.325329\n14.113725\n2.997957\n1.836400e+04\n96.894572\n9.198715\n11.624088\n7.668009\n8.911763\n0.000000\n\n\n50%\n1221.000000\n0.030000\n3.532400e+04\n1156.208330\n3.447100e+04\n2.010000e+02\n94.000000\n102.000000\n66.000000\n98.032742\n...\n74.246891\n16.797562\n3.814239\n3.378800e+04\n98.169562\n11.822313\n15.270164\n10.007610\n10.869119\n0.000000\n\n\n75%\n2059.000000\n0.038000\n7.565100e+04\n2330.000000\n7.296800e+04\n1.291000e+03\n288.000000\n401.000000\n345.000000\n99.074935\n...\n77.195345\n20.549893\n4.949324\n7.284000e+04\n98.598636\n15.133226\n20.351878\n13.182182\n13.412162\n1.000000\n\n\nmax\n3052.000000\n0.110000\n5.105067e+06\n88018.396600\n3.204947e+06\n1.317147e+06\n10289.000000\n188565.000000\n384119.000000\n99.822821\n...\n88.898674\n48.078510\n20.791321\n5.023523e+06\n99.860384\n48.691099\n64.308477\n43.312464\n31.161972\n1.000000\n\n\n\n\n8 rows × 25 columns\n\n\n\n\n\nQ2. poptotal(전체 인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.\n\ndf_mw = df_mw.rename(columns = {'poptotal' : 'total'})\ndf_mw = df_mw.rename(columns = {'popasian' : 'asian'})\n\ndf_mw.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n19.631392\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n11.243308\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n17.033819\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n17.278954\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n14.475999\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n\n\n\n\n5 rows × 28 columns\n\n\n\n\n\nQ3. total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\ndf_mw['per_asian'] = (df_mw['asian'] / df_mw['total']) * 100\ndf_mw\n\ndf_mw['per_asian'].plot.hist()\n\n\n\n\n\n\n\n\n\n\nQ4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 large, 그 외에는 small을 부여한 파생변수를 만들어 보세요.\n\nper_asian_mean = df_mw['per_asian'].mean()\nper_asian_mean\n\nimport numpy as np\ndf_mw['SmallLarge'] = np.where(df_mw['per_asian'] &gt; per_asian_mean, 'large', 'small')\ndf_mw\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\nper_asian\nSmallLarge\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n432\n3048\nWAUKESHA\nWI\n0.034\n304715\n8962.205880\n298313\n1096\n672\n2699\n...\n299802\n98.387674\n3.121060\n3.785820\n2.590061\n4.085479\n1\nHLU\n0.885746\nlarge\n\n\n433\n3049\nWAUPACA\nWI\n0.045\n46104\n1024.533330\n45695\n22\n125\n92\n...\n44412\n96.330036\n8.488697\n10.071411\n6.953799\n10.338641\n0\nAAR\n0.199549\nsmall\n\n\n434\n3050\nWAUSHARA\nWI\n0.037\n19385\n523.918919\n19094\n29\n70\n43\n...\n19163\n98.854785\n13.786985\n20.050708\n11.695784\n11.804558\n0\nAAR\n0.221821\nsmall\n\n\n435\n3051\nWINNEBAGO\nWI\n0.035\n140320\n4009.142860\n136822\n697\n685\n1728\n...\n133950\n95.460376\n8.804031\n10.592031\n8.660587\n6.661094\n1\nHAU\n1.231471\nlarge\n\n\n436\n3052\nWOOD\nWI\n0.048\n73605\n1533.437500\n72157\n90\n481\n722\n...\n72685\n98.750085\n8.525831\n11.162997\n7.375656\n7.882918\n0\nAAR\n0.980912\nlarge\n\n\n\n\n437 rows × 30 columns\n\n\n\n\n\nQ5. large와 small에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\n# 빈도표\ndf_mw['SmallLarge'].value_counts()\n\n# 빈도 막대 그래프\ncount_sl = df_mw['SmallLarge'].value_counts()\ncount_sl.plot.bar(rot = 0)"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "HW2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nmpg = pd.read_csv('../data/mpg.csv')\n\nlow_displ = mpg.query('displ &lt;= 4')\nhigh_displ = mpg.query('displ &gt;= 5')\n\nlow_displ['hwy'].mean()\nhigh_displ['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n\n\n\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\n\naudi['cty'].mean()\ntoyota['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\n\n\n\n\ncfh = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncfh['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#p",
    "href": "posts/hw2/index.html#p",
    "title": "HW2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nmpg = pd.read_csv('../data/mpg.csv')\n\nlow_displ = mpg.query('displ &lt;= 4')\nhigh_displ = mpg.query('displ &gt;= 5')\n\nlow_displ['hwy'].mean()\nhigh_displ['hwy'].mean()\n\nnp.float64(18.07894736842105)\n\n\n\n\n\n\naudi = mpg.query('manufacturer == \"audi\"')\ntoyota = mpg.query('manufacturer == \"toyota\"')\n\naudi['cty'].mean()\ntoyota['cty'].mean()\n\nnp.float64(18.529411764705884)\n\n\n\n\n\n\ncfh = mpg.query('manufacturer in [\"chevrolet\", \"ford\", \"honda\"]')\ncfh['hwy'].mean()\n\nnp.float64(22.50943396226415)"
  },
  {
    "objectID": "posts/hw2/index.html#p-1",
    "href": "posts/hw2/index.html#p-1",
    "title": "HW2",
    "section": "153p",
    "text": "153p\n\nQ1. audi에서 생성한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. audi에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\n# audi = mpg.query('manufacturer == \"audi\"')\naudi.sort_values('hwy', ascending = False).head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/index.html#p-2",
    "href": "posts/hw2/index.html#p-2",
    "title": "HW2",
    "section": "158p",
    "text": "158p\n\nQ1. mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg_cp = mpg.copy()\n\nmpg_cp = mpg_cp.assign(ch_sum = mpg_cp['cty'] + mpg_cp['hwy']) # 혹은 mpg_cp['ch_sum'] = (mpg_cp['cty'] + mpg_cp['hwy'])\n\nmpg_cp\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nch_sum\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n\n\n\n\n234 rows × 12 columns\n\n\n\n\n\nQ2. 앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg_cp = mpg_cp.assign(ch_mean = mpg_cp['ch_sum'] / 2)\n\nmpg_cp\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nch_sum\nch_mean\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n47\n23.5\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n50\n25.0\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n42\n21.0\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n44\n22.0\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n43\n21.5\n\n\n\n\n234 rows × 13 columns\n\n\n\n\n\nQ3. ’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg_cp.sort_values('ch_mean', ascending = False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nch_sum\nch_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0\n\n\n\n\n\n\n\n\n\nQ4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.\n\nmpg = mpg.assign(ch_sum = lambda x: x['cty'] + x['hwy'],\n                 ch_mean = lambda x: x['ch_sum'] / 2) \\\n         .sort_values('ch_mean', ascending = False) \\\n         .head(3)\n\nmpg\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nch_sum\nch_mean\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Project",
    "section": "",
    "text": "My recent projects below."
  },
  {
    "objectID": "posts/hw3/index.html",
    "href": "posts/hw3/index.html",
    "title": "HW3",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as plt\n\nmpg = pd.read_csv('../data/mpg.csv')\nsns.scatterplot(data = mpg, x = 'cty', y = 'hwy', hue = 'cty')\n\n\n\n\n\n\n\n\n\n\n\n\nmidwest = pd.read_csv('../data/midwest.csv')\nsns.scatterplot(data = midwest, x = 'poptotal', y = 'popasian', hue = 'poptotal') \\\n   .set(xlim = [0, 500000], ylim = [0, 10000])"
  },
  {
    "objectID": "posts/hw3/index.html#p",
    "href": "posts/hw3/index.html#p",
    "title": "HW3",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as plt\n\nmpg = pd.read_csv('../data/mpg.csv')\nsns.scatterplot(data = mpg, x = 'cty', y = 'hwy', hue = 'cty')\n\n\n\n\n\n\n\n\n\n\n\n\nmidwest = pd.read_csv('../data/midwest.csv')\nsns.scatterplot(data = midwest, x = 'poptotal', y = 'popasian', hue = 'poptotal') \\\n   .set(xlim = [0, 500000], ylim = [0, 10000])"
  },
  {
    "objectID": "posts/hw3/index.html#p-1",
    "href": "posts/hw3/index.html#p-1",
    "title": "HW3",
    "section": "211p",
    "text": "211p\n\nQ1. 어떤 회사에서 생산한 'suv'차종의 도시 연비가 높은지 알아보려고 합니다. 'suv'차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\nmpg = pd.read_csv('../data/mpg.csv')\n\ndf_mpg = mpg.query('category == \"suv\"') \\\n            .groupby('model', as_index = False) \\\n            .agg(suv_cty_mean = ('cty', 'mean')) \\\n            .sort_values('suv_cty_mean', ascending = False)[0:5]\n            \nsns.barplot(data = df_mpg, x = 'model', y = 'suv_cty_mean', hue = 'model')\n\n\n\n\n\n\n\n\n\n\nQ2. 자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\ndf_mpg2 = mpg.groupby('category', as_index = False) \\\n             .agg(category_count = ('category', 'count')) \\\n             .sort_values('category_count', ascending = False)\n            \nsns.barplot(data = df_mpg2, x = 'category', y = 'category_count', hue = 'category')"
  },
  {
    "objectID": "posts/hw3/index.html#산점도",
    "href": "posts/hw3/index.html#산점도",
    "title": "HW3",
    "section": "산점도",
    "text": "산점도\n\nx축은 displ, y축은 hwy를 나타낸 산점도 만들기\n\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nmpg = pd.read_csv('../data/mpg.csv')\n\nsns.scatterplot(data = mpg, x = 'displ', y = 'hwy')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\nx축 범위를 3~6, y축 범위를 10~30으로 제한해 산점도 업데이트\n\n\nsns.scatterplot(data = mpg, x = 'displ', y = 'hwy') \\\n   .set(xlim = [3, 6], ylim = [10, 30])\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\ndrv별로 표식 색깔 다르게 표현\n\n\nsns.scatterplot(data = mpg, x = 'displ', y = 'hwy', hue = 'drv')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw3/index.html#막대-그래프",
    "href": "posts/hw3/index.html#막대-그래프",
    "title": "HW3",
    "section": "막대 그래프",
    "text": "막대 그래프\n\n집단별 평균표를 만들고, 막대 그래프 만들기\n\n\ndf_mpg = mpg.groupby('drv', as_index = False) \\\n   .agg(mean_hwy = ('hwy', 'mean'))\ndf_mpg\n\nsns.barplot(data = df_mpg, x = 'drv', y = 'mean_hwy', hue = 'drv')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n크기 순으로 정렬하여 막대 그래프 업데이트\n\n\ndf_mpg = df_mpg.sort_values('mean_hwy', ascending = False)\nsns.barplot(data = df_mpg, x = 'drv', y = 'mean_hwy', hue = 'drv')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n집단별 빈도표를 만들고, 막대 그래프 만들기\n\n\ndf_mpg = mpg.groupby('drv', as_index = False) \\\n            .agg(n = ('drv', 'count'))\nsns.barplot(data = df_mpg, x = 'drv', y = 'n', hue = 'drv')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n.countplot()으로 빈도 막대 그래프 만들기\n\n.barplot()과의 차이: countplot()은 별도로 빈도표를 만드는 작업이 필요하지 않다.\n\n\n\nsns.countplot(data = mpg, x = 'drv', hue = 'drv')\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/hw3/index.html#plotly-산점도",
    "href": "posts/hw3/index.html#plotly-산점도",
    "title": "HW3",
    "section": "Plotly 산점도",
    "text": "Plotly 산점도\n\n산점도 만들기\n\n\nimport plotly.express as px\npx.scatter(data_frame = mpg, x = 'cty', y = 'hwy', color = 'drv')"
  },
  {
    "objectID": "posts/hw3/index.html#plotly-막대-그래프",
    "href": "posts/hw3/index.html#plotly-막대-그래프",
    "title": "HW3",
    "section": "Plotly 막대 그래프",
    "text": "Plotly 막대 그래프\n** 자동차 종류별 빈도를 구하고, 막대 그래프 만들기\n\ndf = mpg.groupby('category', as_index = False) \\\n        .agg(n = ('category', 'count'))\n\npx.bar(data_frame = df, x = 'category', y = 'n', color = 'category')"
  },
  {
    "objectID": "posts/team_proj_1/index.html",
    "href": "posts/team_proj_1/index.html",
    "title": "TEAM PROJECT 1",
    "section": "",
    "text": "어느 요일이 범죄로부터 가장 안전할까?\n2018~2022년 강력/폭력/지능범죄의 요일별 발생 건수 데이터\n\n\n\n\n\n\n가설\n\n\n\n평일이 상대적으로 안전할 것이다.\n\n\n\n\n\n\n\n\n범죄의 정의\n\n\n\n\n강력범죄 : 생명, 신체, 자유에 심각한 위협을 가하는 범죄\n폭력범죄 : 다른 사람에게 신체적 상해를 입히거나 신체적 위협을 가하는 범죄\n지능범죄 : 지적 능력과 계획을 통해 이루어지며, 주로 경제적 이득을 얻기 위한 범죄\n\n\n\n\n\n\n[데이터 로드]\n\n# 0. 패키지 로드\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# 1. 데이터 파일 불러오기, 원본 데이터 복사하기\n## header: 원본의 두 번째 행 데이터를 열의 이름으로 지정\n## encoding: UnicodeDecodeError 발생으로 한글 표현 가능한 인코딩 방식인 EUC-KR 지정\n## pd.set_option(): 전체 열을 모두 표시하도록 지정\npd.set_option('display.max_columns', None)\ndf = pd.read_csv('../data/crime.csv', header = 1, encoding = 'EUC-KR')\ndf.head()\n\n# 2. 원본 데이터 복사하기\n## deepcopy로 원본유지\ncrime = df.copy()\n\n\n\n[변수명 변경]\n\n# 3. 열 이름, 원소 이름 변경\n## 열 이름 변경\n### 강력범죄는 s_, 폭력범죄는 g_, 지능범죄는 i_로 시작하도록 변경\ncrime.columns\ncrime.columns = ['year','day']\\\n                + [i.replace(i, \"s_\"+i) for i in crime.columns[2:10]]\\\n                + [i.replace(i, \"g_\"+i) for i in crime.columns[10:18]]\\\n                + [i.replace(i, \"i_\"+i) for i in crime.columns[18:27]]\n\n## 원소 이름 변경\n## replace(): 요일을 영어로 일괄 변경\ncrime = crime.replace({'월요일':'mon',\n                       '화요일':'tue',\n                       '수요일':'wed',\n                       '목요일':'thu',\n                       '금요일':'fri',\n                       '토요일':'sat',\n                       '일요일':'sun'})\ncrime.head(7)\n\n## reindex(): 행의 순서 바꾸기(일&gt;토에서 월&gt;일로) &gt; 추후 그래프 순서를 위해서 설정\nlen(crime)\ncrime = crime.reindex([1, 2, 3, 4, 5, 6, 0,\n                       8, 9, 10, 11, 12, 13, 7,\n                       15, 16, 17, 18, 19, 20, 14,\n                       22, 23, 24, 25, 26, 27, 21,\n                       29, 30, 31, 32, 33, 34, 28])\ncrime.head(7)\n\n\n\n\n\n\n\n\nyear\nday\ns_살인기수\ns_살인미수등\ns_강도\ns_강간\ns_유사강간\ns_강제추행\ns_기타 강간·강제추행등\ns_방화\ng_상해\ng_폭행\ng_체포·감금\ng_협박\ng_약취·유인\ng_폭력행위등\ng_공갈\ng_손괴\ni_직무유기\ni_직권남용\ni_증수뢰\ni_통화\ni_문서·인장\ni_유가증권인지\ni_사기\ni_횡령\ni_배임\n\n\n\n\n1\n2018\nmon\n40\n74\n120\n698\n113\n2197\n51\n236\n5326\n20195\n168\n2462\n34\n1175\n685\n7452\n105\n96\n53\n230\n2202\n20\n45478\n7968\n802\n\n\n2\n2018\ntue\n38\n62\n133\n709\n103\n2263\n48\n263\n5649\n21334\n189\n2530\n27\n1205\n644\n7767\n92\n110\n57\n226\n1992\n25\n45020\n7793\n761\n\n\n3\n2018\nwed\n53\n68\n116\n743\n96\n2333\n49\n235\n5395\n21160\n180\n2474\n26\n1088\n604\n7681\n92\n110\n69\n208\n1893\n30\n45399\n7922\n725\n\n\n4\n2018\nthu\n41\n76\n117\n646\n99\n2389\n45\n246\n5396\n21181\n192\n2444\n30\n1163\n656\n7514\n114\n110\n64\n242\n2710\n32\n45752\n7992\n730\n\n\n5\n2018\nfri\n54\n67\n101\n699\n99\n2547\n55\n212\n5628\n22423\n165\n2408\n26\n1206\n593\n8591\n103\n104\n61\n212\n1991\n58\n46698\n8817\n790\n\n\n6\n2018\nsat\n29\n69\n108\n892\n139\n2760\n59\n243\n6267\n26997\n151\n2384\n15\n1662\n457\n9200\n36\n40\n21\n42\n829\n15\n22158\n7819\n288\n\n\n0\n2018\nsun\n54\n72\n126\n906\n127\n2564\n49\n256\n6105\n25977\n162\n2498\n29\n1705\n457\n8479\n39\n33\n22\n34\n673\n17\n19524\n6802\n248\n\n\n\n\n\n\n\n\n\n[파생변수 추가]\n\n# 4. 파생변수 추가\n## 범죄별 건수 합계 및 총 범죄 건수 합계 파생변수\ncrime = crime.assign(\n    total_s = crime.iloc[:, 2:10].sum(axis = 1),\n    total_g = crime.iloc[:, 10:18].sum(axis = 1),\n    total_i = crime.iloc[:, 18:27].sum(axis = 1),\n    total = crime.iloc[:, 2:27].sum(axis = 1))\ncrime.head()\n\n## 평일/주말 구분 라벨 파생변수\n### 평일: 월~금, 주말: 토~일\ncrime['day_label'] = np.where(crime['day'].isin(['mon', 'tue', 'wed', 'thu', 'fri']), \\\n                                                 'week', 'weekend')\ncrime.head(7)\n\n\n\n\n\n\n\n\nyear\nday\ns_살인기수\ns_살인미수등\ns_강도\ns_강간\ns_유사강간\ns_강제추행\ns_기타 강간·강제추행등\ns_방화\ng_상해\ng_폭행\ng_체포·감금\ng_협박\ng_약취·유인\ng_폭력행위등\ng_공갈\ng_손괴\ni_직무유기\ni_직권남용\ni_증수뢰\ni_통화\ni_문서·인장\ni_유가증권인지\ni_사기\ni_횡령\ni_배임\ntotal_s\ntotal_g\ntotal_i\ntotal\nday_label\n\n\n\n\n1\n2018\nmon\n40\n74\n120\n698\n113\n2197\n51\n236\n5326\n20195\n168\n2462\n34\n1175\n685\n7452\n105\n96\n53\n230\n2202\n20\n45478\n7968\n802\n3529\n37497\n56954\n97980\nweek\n\n\n2\n2018\ntue\n38\n62\n133\n709\n103\n2263\n48\n263\n5649\n21334\n189\n2530\n27\n1205\n644\n7767\n92\n110\n57\n226\n1992\n25\n45020\n7793\n761\n3619\n39345\n56076\n99040\nweek\n\n\n3\n2018\nwed\n53\n68\n116\n743\n96\n2333\n49\n235\n5395\n21160\n180\n2474\n26\n1088\n604\n7681\n92\n110\n69\n208\n1893\n30\n45399\n7922\n725\n3693\n38608\n56448\n98749\nweek\n\n\n4\n2018\nthu\n41\n76\n117\n646\n99\n2389\n45\n246\n5396\n21181\n192\n2444\n30\n1163\n656\n7514\n114\n110\n64\n242\n2710\n32\n45752\n7992\n730\n3659\n38576\n57746\n99981\nweek\n\n\n5\n2018\nfri\n54\n67\n101\n699\n99\n2547\n55\n212\n5628\n22423\n165\n2408\n26\n1206\n593\n8591\n103\n104\n61\n212\n1991\n58\n46698\n8817\n790\n3834\n41040\n58834\n103708\nweek\n\n\n6\n2018\nsat\n29\n69\n108\n892\n139\n2760\n59\n243\n6267\n26997\n151\n2384\n15\n1662\n457\n9200\n36\n40\n21\n42\n829\n15\n22158\n7819\n288\n4299\n47133\n31248\n82680\nweekend\n\n\n0\n2018\nsun\n54\n72\n126\n906\n127\n2564\n49\n256\n6105\n25977\n162\n2498\n29\n1705\n457\n8479\n39\n33\n22\n34\n673\n17\n19524\n6802\n248\n4154\n45412\n27392\n76958\nweekend\n\n\n\n\n\n\n\n\n\n[범죄별, 평일/주말별 건수 합계 그래프]\n\n# 5. (1)발생 건수 합계 기준 그래프\n## 연도 기준 범죄별 건수 합계\n### 그래프 설정\nplt.rcParams.update({'font.family':'Malgun Gothic','font.size' : 10})\nplt.figure(figsize = (8, 6))\n\n### 집단별 합계표 생성\nyear_total = crime.groupby('year')\\\n                  .agg(강력범죄=('total_s','sum'),\n                       폭력범죄=('total_g','sum'),\n                       지능범죄=('total_i','sum'))\n\n### 그래프 생성                       \nyear_total.plot.barh(stacked = True)\nplt.xlabel(\"건수\")\nplt.ylabel(\"연도\")\nplt.title(\"각 범죄 발생 건수 비율 그래프\")\nplt.show()\nplt.clf()\n\n## 평일/주말 기준 건수 합계\n### 평일/주말별 건수 합계표 생성\nweek_end = crime.groupby('day_label', as_index = False) \\\n                .agg(total=('total', 'sum'))\n\n### 그래프 생성                \nsns.barplot(data = week_end, x = 'day_label', y = 'total', hue = 'day_label')\nplt.xlabel(\"평일/주말\")\nplt.ylabel(\"건수(백만)\")\nplt.title(\"평일/주말별 범죄 발생 건수 그래프\")\nplt.show()\nplt.clf()\n\n&lt;Figure size 768x576 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n위 그래프의 한계\n\n\n\n\n각 범죄별 발생 건수의 볼륨 차이, 평일(5일)/주말(2일) 일수 차이 확인\n\n따라서, 합계로 비교하는데 오류가 있다는 판단\n\n\n\n\n\n\n[범죄별 요일별 건수 비율 그래프]\n\n# 5. (2)연도별 범죄 발생 비율 파생변수 추가\n## pd.options.display.float_format : 소수점 둘째 자리까지만 보이도록 설정\npd.options.display.float_format = '{:.2f}'.format\n\nfor i in [\"_s\", \"_g\" ,\"_i\" ,\"\"]:\n    for j in range(2018, 2023):\n        crime.loc[crime['year'] == j, 'total'+ i +'_year'] = sum(crime.loc[crime['year'] == j,'total' + i])\n    crime['ratio'+ i +'_day'] = crime['total' + i] / crime['total'+ i +'_year'] * 100\n\n## 아래 코드도 같은 결과 \n### crime = crime.assign(\n###               total_s_year = lambda x: x.groupby('year')['total_s'].transform('sum'), \n###               ratio_s_day = lambda x: x['total_s'] / x['total_s_year'] * 100,\n###\n###               total_g_year = lambda x: x.groupby('year')['total_g'].transform('sum'),\n###               ratio_g_day = lambda x: x['total_g'] / x['total_g_year'] * 100,\n###\n###               total_i_year = lambda x: x.groupby('year')['total_i'].transform('sum'),\n###               ratio_i_day = lambda x: x['total_i'] / x['total_i_year'] * 100,\n###\n###               total_year = lambda x: x.groupby('year')['total'].transform('sum'),\n###               ratio_day = lambda x: x['total'] / x['total_year'] * 100)\n    \ncrime.head(10)\n\n\n\n\n\n\n\n\nyear\nday\ns_살인기수\ns_살인미수등\ns_강도\ns_강간\ns_유사강간\ns_강제추행\ns_기타 강간·강제추행등\ns_방화\ng_상해\ng_폭행\ng_체포·감금\ng_협박\ng_약취·유인\ng_폭력행위등\ng_공갈\ng_손괴\ni_직무유기\ni_직권남용\ni_증수뢰\ni_통화\ni_문서·인장\ni_유가증권인지\ni_사기\ni_횡령\ni_배임\ntotal_s\ntotal_g\ntotal_i\ntotal\nday_label\ntotal_s_year\nratio_s_day\ntotal_g_year\nratio_g_day\ntotal_i_year\nratio_i_day\ntotal_year\nratio_day\n\n\n\n\n1\n2018\nmon\n40\n74\n120\n698\n113\n2197\n51\n236\n5326\n20195\n168\n2462\n34\n1175\n685\n7452\n105\n96\n53\n230\n2202\n20\n45478\n7968\n802\n3529\n37497\n56954\n97980\nweek\n26787.00\n13.17\n287611.00\n13.04\n344698.00\n16.52\n659096.00\n14.87\n\n\n2\n2018\ntue\n38\n62\n133\n709\n103\n2263\n48\n263\n5649\n21334\n189\n2530\n27\n1205\n644\n7767\n92\n110\n57\n226\n1992\n25\n45020\n7793\n761\n3619\n39345\n56076\n99040\nweek\n26787.00\n13.51\n287611.00\n13.68\n344698.00\n16.27\n659096.00\n15.03\n\n\n3\n2018\nwed\n53\n68\n116\n743\n96\n2333\n49\n235\n5395\n21160\n180\n2474\n26\n1088\n604\n7681\n92\n110\n69\n208\n1893\n30\n45399\n7922\n725\n3693\n38608\n56448\n98749\nweek\n26787.00\n13.79\n287611.00\n13.42\n344698.00\n16.38\n659096.00\n14.98\n\n\n4\n2018\nthu\n41\n76\n117\n646\n99\n2389\n45\n246\n5396\n21181\n192\n2444\n30\n1163\n656\n7514\n114\n110\n64\n242\n2710\n32\n45752\n7992\n730\n3659\n38576\n57746\n99981\nweek\n26787.00\n13.66\n287611.00\n13.41\n344698.00\n16.75\n659096.00\n15.17\n\n\n5\n2018\nfri\n54\n67\n101\n699\n99\n2547\n55\n212\n5628\n22423\n165\n2408\n26\n1206\n593\n8591\n103\n104\n61\n212\n1991\n58\n46698\n8817\n790\n3834\n41040\n58834\n103708\nweek\n26787.00\n14.31\n287611.00\n14.27\n344698.00\n17.07\n659096.00\n15.73\n\n\n6\n2018\nsat\n29\n69\n108\n892\n139\n2760\n59\n243\n6267\n26997\n151\n2384\n15\n1662\n457\n9200\n36\n40\n21\n42\n829\n15\n22158\n7819\n288\n4299\n47133\n31248\n82680\nweekend\n26787.00\n16.05\n287611.00\n16.39\n344698.00\n9.07\n659096.00\n12.54\n\n\n0\n2018\nsun\n54\n72\n126\n906\n127\n2564\n49\n256\n6105\n25977\n162\n2498\n29\n1705\n457\n8479\n39\n33\n22\n34\n673\n17\n19524\n6802\n248\n4154\n45412\n27392\n76958\nweekend\n26787.00\n15.51\n287611.00\n15.79\n344698.00\n7.95\n659096.00\n11.68\n\n\n8\n2019\nmon\n45\n70\n113\n686\n99\n2272\n53\n181\n4908\n19966\n189\n3013\n40\n1126\n818\n7974\n108\n126\n46\n186\n2130\n22\n52740\n8559\n859\n3519\n38034\n64776\n106329\nweek\n26476.00\n13.29\n287913.00\n13.21\n381533.00\n16.98\n695922.00\n15.28\n\n\n9\n2019\ntue\n48\n68\n116\n734\n109\n2306\n45\n181\n5063\n20766\n170\n3039\n41\n1100\n740\n7634\n123\n118\n42\n169\n1971\n16\n51876\n8128\n730\n3607\n38553\n63173\n105333\nweek\n26476.00\n13.62\n287913.00\n13.39\n381533.00\n16.56\n695922.00\n15.14\n\n\n10\n2019\nwed\n40\n62\n105\n719\n92\n2358\n49\n209\n5038\n20981\n171\n3072\n34\n1086\n757\n7766\n106\n97\n52\n187\n1840\n30\n51225\n8318\n787\n3634\n38905\n62642\n105181\nweek\n26476.00\n13.73\n287913.00\n13.51\n381533.00\n16.42\n695922.00\n15.11\n\n\n\n\n\n\n\n\n# 5. (3)연도/요일별 범죄 발생 비율 변화 그래프\n## 연도/요일별 범죄 발생 비율표 생성\nratio_year_day = crime.iloc[:, [0, 1, -7, -5, -3, -1]]\nratio_year_day.head(7)\n\n## 강력범죄 연도/요일별 범죄 발생 비율 변화 그래프\n### plt.xticks() : x축의 범위를 2018~2022로 설정\nsns.lineplot(data = ratio_year_day, x = 'day', y = 'ratio_s_day', hue = 'year')\nplt.xlabel(\"요일\")\nplt.ylabel(\"비율(%)\")\nplt.title(\"강력범죄 요일별 범죄율 비교 그래프\")\nplt.show()\nplt.clf()\n\n## 폭력범죄 연도/요일별 범죄 발생 비율 변화 그래프\nsns.lineplot(data = ratio_year_day, x = 'day', y = 'ratio_g_day', hue = 'year')\nplt.xlabel(\"요일\")\nplt.ylabel(\"비율(%)\")\nplt.title(\"폭력범죄 요일별 범죄율 비교 그래프\")\nplt.show()\nplt.clf()\n\n## 지능범죄 연도/요일별 범죄 발생 비율 변화 그래프\nsns.lineplot(data = ratio_year_day, x = 'day', y = 'ratio_i_day', hue = 'year')\nplt.xlabel(\"요일\")\nplt.ylabel(\"비율(%)\")\nplt.title(\"지능범죄 요일별 범죄율 비교 그래프\")\nplt.show()\nplt.clf()\n\n## 전체 범죄 연도/요일별 범죄 발생 비율 변화 그래프\nsns.lineplot(data = ratio_year_day, x = 'day', y = 'ratio_day', hue = 'year')\nplt.xlabel(\"요일\")\nplt.ylabel(\"비율(%)\")\nplt.title(\"전체 범죄 요일별 범죄율 비교 그래프\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n위 그래프의 한계\n\n\n\n\n범죄별 그래프로 각 범죄의 요일별 발생 비율은 파악할 수 있으나,\n\n지능범죄의 주말 발생 건수가 현저히 낮아 전체 그래프에서 왜곡이 발생\n\n\n따라서, 연도 기준으로 데이터를 비교하는데 오류가 있다는 판단\n\n\n\n\n\n\n[요일 기준 범죄별 비율 비교 그래프]\n\n# 6. 요일별 전체 범죄 발생 비율 그래프\n## 요일별 전체 범죄 발생 비율표 생성\ntotal_day = crime.groupby('day') \\\n                 .agg(total_s = ('total_s', 'sum'),\n                      total_g = ('total_g', 'sum'),\n                      total_i = ('total_i', 'sum'),\n                      total = ('total', 'sum'))\n\ntotal_day = total_day.assign(\n    강력범죄 = lambda x: x['total_s'] / sum(x['total_s']) * 100,\n    폭력범죄 = lambda x: x['total_g'] / sum(x['total_g']) * 100,\n    지능범죄 = lambda x: x['total_i'] / sum(x['total_i']) * 100,\n    총_범죄율 = lambda x: x['total'] / sum(x['total']) * 100)\n\ntotal_day = total_day.reindex(index=['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'])\n\nratio_total_day = total_day.iloc[:, 4:]\nratio_total_day\n\n## 요일별 전체 범죄 발생 비율 그래프 생성\nsns.lineplot(data = ratio_total_day)\nplt.xlabel(\"요일\")\nplt.ylabel(\"비율(%)\")\nplt.title(\"요일 기준 범죄율 비교 그래프\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n결론\n\n\n\n\n강력범죄/폭력범죄는 가설에 성립하지만, 지능범죄는 반대의 결과가 도출되었다.\n\n따라서, 강력범죄는 화요일/폭력범죄는 월요일/지능범죄는 일요일이 가장 안전하다.\n\n\n\n\n\n\n\n\n\n\n생각해볼 점\n\n\n\n지능범죄가 평일에 많이 발생하는 이유는, 공공기관/기업 업무 시간에 이루어져야 하는 행위가 많기 때문이라고 추측된다.\n\n\n\n\n\n\n\n\n분석 발전 방향\n\n\n\n\n데이터 추가\n\n범죄 발생 시간 : 특정 요일의 어느 시간대에 범죄가 주로 발생하는지 분석\n사회적/경제적 요인 : 실업률, 소득 수준, 인구 밀도 등 사회적/경제적 요인으로 차이가 있는지 분석\n이벤트/축제 정보 : 특정 요일과 기간에 개최된 이벤트, 축제, 공휴일 등의 요인으로 차이가 있는지 분석"
  },
  {
    "objectID": "posts/team_proj_1/index.html#가설",
    "href": "posts/team_proj_1/index.html#가설",
    "title": "TEAM PROJECT 1",
    "section": "가설",
    "text": "가설\n평일이 상대적으로 안전할 것이다."
  },
  {
    "objectID": "posts/team_proj_1/index.html#주제",
    "href": "posts/team_proj_1/index.html#주제",
    "title": "TEAM PROJECT 1",
    "section": "주제",
    "text": "주제\n어느 요일이 범죄로부터 가장 안전할까?\n\n\n\n\n\n\n가설\n\n\n\n평일이 상대적으로 안전할 것이다.\n\n\n\n\n\n\n\n\n범죄의 정의\n\n\n\n\n강력범죄 : 생명, 신체, 자유에 심각한 위협을 가하는 범죄\n폭력범죄 : 다른 사람에게 신체적 상해를 입히거나 신체적 위협을 가하는 범죄\n지능범죄 : 지적 능력과 계획을 통해 이루어지며, 주로 경제적 이득을 얻기 위한 범죄\n\n\n\n\n\n[데이터 로드]\n\n# 0. 패키지 로드\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# 1. 데이터 파일 불러오기, 원본 데이터 복사하기\n## header: 원본의 두 번째 행 데이터를 열의 이름으로 지정\n## encoding: UnicodeDecodeError 발생으로 한글 표현 가능한 인코딩 방식인 EUC-KR 지정\n## pd.set_option(): 전체 열을 모두 표시하도록 지정\npd.set_option('display.max_columns', None)\ndf = pd.read_csv('../data/crime.csv', header = 1, encoding = 'EUC-KR')\ndf.head()\n\n# 2. 원본 데이터 복사하기\n## deepcopy로 원본유지\ncrime = df.copy()\n\n\n\n[변수명 변경]\n\n# 3. 열 이름, 원소 이름 변경\n## 열 이름 변경\n### 강력범죄는 s_, 폭력범죄는 g_, 지능범죄는 i_로 시작하도록 변경\ncrime.columns\ncrime.columns = ['year','day']\\\n                + [i.replace(i, \"s_\"+i) for i in crime.columns[2:10]]\\\n                + [i.replace(i, \"g_\"+i) for i in crime.columns[10:18]]\\\n                + [i.replace(i, \"i_\"+i) for i in crime.columns[18:27]]\n\n## 원소 이름 변경\n## replace(): 요일을 영어로 일괄 변경\ncrime = crime.replace({'월요일':'mon',\n                       '화요일':'tue',\n                       '수요일':'wed',\n                       '목요일':'thu',\n                       '금요일':'fri',\n                       '토요일':'sat',\n                       '일요일':'sun'})\ncrime.head(7)\n\n## reindex(): 행의 순서 바꾸기(일&gt;토에서 월&gt;일로) &gt; 추후 그래프 순서를 위해서 설정\nlen(crime)\ncrime = crime.reindex([1, 2, 3, 4, 5, 6, 0,\n                       8, 9, 10, 11, 12, 13, 7,\n                       15, 16, 17, 18, 19, 20, 14,\n                       22, 23, 24, 25, 26, 27, 21,\n                       29, 30, 31, 32, 33, 34, 28])\ncrime.head(7)\n\n\n\n\n\n\n\n\nyear\nday\ns_살인기수\ns_살인미수등\ns_강도\ns_강간\ns_유사강간\ns_강제추행\ns_기타 강간·강제추행등\ns_방화\ng_상해\ng_폭행\ng_체포·감금\ng_협박\ng_약취·유인\ng_폭력행위등\ng_공갈\ng_손괴\ni_직무유기\ni_직권남용\ni_증수뢰\ni_통화\ni_문서·인장\ni_유가증권인지\ni_사기\ni_횡령\ni_배임\n\n\n\n\n1\n2018\nmon\n40\n74\n120\n698\n113\n2197\n51\n236\n5326\n20195\n168\n2462\n34\n1175\n685\n7452\n105\n96\n53\n230\n2202\n20\n45478\n7968\n802\n\n\n2\n2018\ntue\n38\n62\n133\n709\n103\n2263\n48\n263\n5649\n21334\n189\n2530\n27\n1205\n644\n7767\n92\n110\n57\n226\n1992\n25\n45020\n7793\n761\n\n\n3\n2018\nwed\n53\n68\n116\n743\n96\n2333\n49\n235\n5395\n21160\n180\n2474\n26\n1088\n604\n7681\n92\n110\n69\n208\n1893\n30\n45399\n7922\n725\n\n\n4\n2018\nthu\n41\n76\n117\n646\n99\n2389\n45\n246\n5396\n21181\n192\n2444\n30\n1163\n656\n7514\n114\n110\n64\n242\n2710\n32\n45752\n7992\n730\n\n\n5\n2018\nfri\n54\n67\n101\n699\n99\n2547\n55\n212\n5628\n22423\n165\n2408\n26\n1206\n593\n8591\n103\n104\n61\n212\n1991\n58\n46698\n8817\n790\n\n\n6\n2018\nsat\n29\n69\n108\n892\n139\n2760\n59\n243\n6267\n26997\n151\n2384\n15\n1662\n457\n9200\n36\n40\n21\n42\n829\n15\n22158\n7819\n288\n\n\n0\n2018\nsun\n54\n72\n126\n906\n127\n2564\n49\n256\n6105\n25977\n162\n2498\n29\n1705\n457\n8479\n39\n33\n22\n34\n673\n17\n19524\n6802\n248\n\n\n\n\n\n\n\n\n\n[파생변수 추가]\n\n# 4. 파생변수 추가\n## 범죄별 건수 합계 및 총 범죄 건수 합계 파생변수\ncrime = crime.assign(\n    total_s = crime.iloc[:, 2:10].sum(axis = 1),\n    total_g = crime.iloc[:, 10:18].sum(axis = 1),\n    total_i = crime.iloc[:, 18:27].sum(axis = 1),\n    total = crime.iloc[:, 2:27].sum(axis = 1))\ncrime.head()\n\n## 평일/주말 구분 라벨 파생변수\n### 평일: 월~금, 주말: 토~일\ncrime['day_label'] = np.where(crime['day'].isin(['mon', 'tue', 'wed', 'thu', 'fri']), \\\n                                                 'week', 'weekend')\ncrime.head(7)\n\n\n\n\n\n\n\n\nyear\nday\ns_살인기수\ns_살인미수등\ns_강도\ns_강간\ns_유사강간\ns_강제추행\ns_기타 강간·강제추행등\ns_방화\ng_상해\ng_폭행\ng_체포·감금\ng_협박\ng_약취·유인\ng_폭력행위등\ng_공갈\ng_손괴\ni_직무유기\ni_직권남용\ni_증수뢰\ni_통화\ni_문서·인장\ni_유가증권인지\ni_사기\ni_횡령\ni_배임\ntotal_s\ntotal_g\ntotal_i\ntotal\nday_label\n\n\n\n\n1\n2018\nmon\n40\n74\n120\n698\n113\n2197\n51\n236\n5326\n20195\n168\n2462\n34\n1175\n685\n7452\n105\n96\n53\n230\n2202\n20\n45478\n7968\n802\n3529\n37497\n56954\n97980\nweek\n\n\n2\n2018\ntue\n38\n62\n133\n709\n103\n2263\n48\n263\n5649\n21334\n189\n2530\n27\n1205\n644\n7767\n92\n110\n57\n226\n1992\n25\n45020\n7793\n761\n3619\n39345\n56076\n99040\nweek\n\n\n3\n2018\nwed\n53\n68\n116\n743\n96\n2333\n49\n235\n5395\n21160\n180\n2474\n26\n1088\n604\n7681\n92\n110\n69\n208\n1893\n30\n45399\n7922\n725\n3693\n38608\n56448\n98749\nweek\n\n\n4\n2018\nthu\n41\n76\n117\n646\n99\n2389\n45\n246\n5396\n21181\n192\n2444\n30\n1163\n656\n7514\n114\n110\n64\n242\n2710\n32\n45752\n7992\n730\n3659\n38576\n57746\n99981\nweek\n\n\n5\n2018\nfri\n54\n67\n101\n699\n99\n2547\n55\n212\n5628\n22423\n165\n2408\n26\n1206\n593\n8591\n103\n104\n61\n212\n1991\n58\n46698\n8817\n790\n3834\n41040\n58834\n103708\nweek\n\n\n6\n2018\nsat\n29\n69\n108\n892\n139\n2760\n59\n243\n6267\n26997\n151\n2384\n15\n1662\n457\n9200\n36\n40\n21\n42\n829\n15\n22158\n7819\n288\n4299\n47133\n31248\n82680\nweekend\n\n\n0\n2018\nsun\n54\n72\n126\n906\n127\n2564\n49\n256\n6105\n25977\n162\n2498\n29\n1705\n457\n8479\n39\n33\n22\n34\n673\n17\n19524\n6802\n248\n4154\n45412\n27392\n76958\nweekend\n\n\n\n\n\n\n\n\n\n[범죄별, 평일/주말별 건수 합계 그래프]\n\n# 5. (1)발생 건수 합계 기준 그래프\n## 연도 기준 범죄별 건수 합계\n### 그래프 설정\nplt.rcParams.update({'font.family':'Malgun Gothic','font.size' : 10})\nplt.figure(figsize = (8, 6))\n\n### 집단별 합계표 생성\nyear_total = crime.groupby('year')\\\n                  .agg(강력범죄=('total_s','sum'),\n                       폭력범죄=('total_g','sum'),\n                       지능범죄=('total_i','sum'))\n\n### 그래프 생성                       \nyear_total.plot.barh(stacked = True)\nplt.xlabel(\"건수\")\nplt.ylabel(\"연도\")\nplt.title(\"각 범죄 발생 건수 비율 그래프\")\nplt.show()\nplt.clf()\n\n## 평일/주말 기준 건수 합계\n### 평일/주말별 건수 합계표 생성\nweek_end = crime.groupby('day_label', as_index = False) \\\n                .agg(total=('total', 'sum'))\n\n### 그래프 생성                \nsns.barplot(data = week_end, x = 'day_label', y = 'total', hue = 'day_label')\nplt.xlabel(\"평일/주말\")\nplt.ylabel(\"건수(백만)\")\nplt.title(\"평일/주말별 범죄 발생 건수 그래프\")\nplt.show()\nplt.clf()\n\n&lt;Figure size 768x576 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n위 그래프의 한계\n\n\n\n\n각 범죄별 발생 건수의 볼륨 차이, 평일(5일)/주말(2일) 일수 차이 확인\n\n따라서, 합계로 비교하는데 오류가 있다는 판단\n\n\n\n\n\n\n[범죄별 요일별 건수 비율 그래프]\n\n# 5. (2)연도별 범죄 발생 비율 파생변수 추가\n## pd.options.display.float_format : 소수점 둘째 자리까지만 보이도록 설정\npd.options.display.float_format = '{:.2f}'.format\n\nfor i in [\"_s\", \"_g\" ,\"_i\" ,\"\"]:\n    for j in range(2018, 2023):\n        crime.loc[crime['year'] == j, 'total'+ i +'_year'] = sum(crime.loc[crime['year'] == j,'total' + i])\n    crime['ratio'+ i +'_day'] = crime['total' + i] / crime['total'+ i +'_year'] * 100\n\n## 아래 코드도 같은 결과 \n### crime = crime.assign(\n###               total_s_year = lambda x: x.groupby('year')['total_s'].transform('sum'), \n###               ratio_s_day = lambda x: x['total_s'] / x['total_s_year'] * 100,\n###\n###               total_g_year = lambda x: x.groupby('year')['total_g'].transform('sum'),\n###               ratio_g_day = lambda x: x['total_g'] / x['total_g_year'] * 100,\n###\n###               total_i_year = lambda x: x.groupby('year')['total_i'].transform('sum'),\n###               ratio_i_day = lambda x: x['total_i'] / x['total_i_year'] * 100,\n###\n###               total_year = lambda x: x.groupby('year')['total'].transform('sum'),\n###               ratio_day = lambda x: x['total'] / x['total_year'] * 100)\n    \ncrime.head(10)\n\n\n\n\n\n\n\n\nyear\nday\ns_살인기수\ns_살인미수등\ns_강도\ns_강간\ns_유사강간\ns_강제추행\ns_기타 강간·강제추행등\ns_방화\ng_상해\ng_폭행\ng_체포·감금\ng_협박\ng_약취·유인\ng_폭력행위등\ng_공갈\ng_손괴\ni_직무유기\ni_직권남용\ni_증수뢰\ni_통화\ni_문서·인장\ni_유가증권인지\ni_사기\ni_횡령\ni_배임\ntotal_s\ntotal_g\ntotal_i\ntotal\nday_label\ntotal_s_year\nratio_s_day\ntotal_g_year\nratio_g_day\ntotal_i_year\nratio_i_day\ntotal_year\nratio_day\n\n\n\n\n1\n2018\nmon\n40\n74\n120\n698\n113\n2197\n51\n236\n5326\n20195\n168\n2462\n34\n1175\n685\n7452\n105\n96\n53\n230\n2202\n20\n45478\n7968\n802\n3529\n37497\n56954\n97980\nweek\n26787.00\n13.17\n287611.00\n13.04\n344698.00\n16.52\n659096.00\n14.87\n\n\n2\n2018\ntue\n38\n62\n133\n709\n103\n2263\n48\n263\n5649\n21334\n189\n2530\n27\n1205\n644\n7767\n92\n110\n57\n226\n1992\n25\n45020\n7793\n761\n3619\n39345\n56076\n99040\nweek\n26787.00\n13.51\n287611.00\n13.68\n344698.00\n16.27\n659096.00\n15.03\n\n\n3\n2018\nwed\n53\n68\n116\n743\n96\n2333\n49\n235\n5395\n21160\n180\n2474\n26\n1088\n604\n7681\n92\n110\n69\n208\n1893\n30\n45399\n7922\n725\n3693\n38608\n56448\n98749\nweek\n26787.00\n13.79\n287611.00\n13.42\n344698.00\n16.38\n659096.00\n14.98\n\n\n4\n2018\nthu\n41\n76\n117\n646\n99\n2389\n45\n246\n5396\n21181\n192\n2444\n30\n1163\n656\n7514\n114\n110\n64\n242\n2710\n32\n45752\n7992\n730\n3659\n38576\n57746\n99981\nweek\n26787.00\n13.66\n287611.00\n13.41\n344698.00\n16.75\n659096.00\n15.17\n\n\n5\n2018\nfri\n54\n67\n101\n699\n99\n2547\n55\n212\n5628\n22423\n165\n2408\n26\n1206\n593\n8591\n103\n104\n61\n212\n1991\n58\n46698\n8817\n790\n3834\n41040\n58834\n103708\nweek\n26787.00\n14.31\n287611.00\n14.27\n344698.00\n17.07\n659096.00\n15.73\n\n\n6\n2018\nsat\n29\n69\n108\n892\n139\n2760\n59\n243\n6267\n26997\n151\n2384\n15\n1662\n457\n9200\n36\n40\n21\n42\n829\n15\n22158\n7819\n288\n4299\n47133\n31248\n82680\nweekend\n26787.00\n16.05\n287611.00\n16.39\n344698.00\n9.07\n659096.00\n12.54\n\n\n0\n2018\nsun\n54\n72\n126\n906\n127\n2564\n49\n256\n6105\n25977\n162\n2498\n29\n1705\n457\n8479\n39\n33\n22\n34\n673\n17\n19524\n6802\n248\n4154\n45412\n27392\n76958\nweekend\n26787.00\n15.51\n287611.00\n15.79\n344698.00\n7.95\n659096.00\n11.68\n\n\n8\n2019\nmon\n45\n70\n113\n686\n99\n2272\n53\n181\n4908\n19966\n189\n3013\n40\n1126\n818\n7974\n108\n126\n46\n186\n2130\n22\n52740\n8559\n859\n3519\n38034\n64776\n106329\nweek\n26476.00\n13.29\n287913.00\n13.21\n381533.00\n16.98\n695922.00\n15.28\n\n\n9\n2019\ntue\n48\n68\n116\n734\n109\n2306\n45\n181\n5063\n20766\n170\n3039\n41\n1100\n740\n7634\n123\n118\n42\n169\n1971\n16\n51876\n8128\n730\n3607\n38553\n63173\n105333\nweek\n26476.00\n13.62\n287913.00\n13.39\n381533.00\n16.56\n695922.00\n15.14\n\n\n10\n2019\nwed\n40\n62\n105\n719\n92\n2358\n49\n209\n5038\n20981\n171\n3072\n34\n1086\n757\n7766\n106\n97\n52\n187\n1840\n30\n51225\n8318\n787\n3634\n38905\n62642\n105181\nweek\n26476.00\n13.73\n287913.00\n13.51\n381533.00\n16.42\n695922.00\n15.11\n\n\n\n\n\n\n\n\n# 5. (3)연도/요일별 범죄 발생 비율 변화 그래프\n## 연도/요일별 범죄 발생 비율표 생성\nratio_year_day = crime.iloc[:, [0, 1, -7, -5, -3, -1]]\nratio_year_day.head(7)\n\n## 강력범죄 연도/요일별 범죄 발생 비율 변화 그래프\n### plt.xticks() : x축의 범위를 2018~2022로 설정\nsns.lineplot(data = ratio_year_day, x = 'day', y = 'ratio_s_day', hue = 'year')\nplt.xlabel(\"요일\")\nplt.ylabel(\"비율(%)\")\nplt.title(\"강력범죄 요일별 범죄율 비교 그래프\")\nplt.show()\nplt.clf()\n\n## 폭력범죄 연도/요일별 범죄 발생 비율 변화 그래프\nsns.lineplot(data = ratio_year_day, x = 'day', y = 'ratio_g_day', hue = 'year')\nplt.xlabel(\"요일\")\nplt.ylabel(\"비율(%)\")\nplt.title(\"폭력범죄 요일별 범죄율 비교 그래프\")\nplt.show()\nplt.clf()\n\n## 지능범죄 연도/요일별 범죄 발생 비율 변화 그래프\nsns.lineplot(data = ratio_year_day, x = 'day', y = 'ratio_i_day', hue = 'year')\nplt.xlabel(\"요일\")\nplt.ylabel(\"비율(%)\")\nplt.title(\"지능범죄 요일별 범죄율 비교 그래프\")\nplt.show()\nplt.clf()\n\n## 전체 범죄 연도/요일별 범죄 발생 비율 변화 그래프\nsns.lineplot(data = ratio_year_day, x = 'day', y = 'ratio_day', hue = 'year')\nplt.xlabel(\"요일\")\nplt.ylabel(\"비율(%)\")\nplt.title(\"전체 범죄 요일별 범죄율 비교 그래프\")\nplt.show()\nplt.clf()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n위 그래프의 한계\n\n\n\n\n범죄별 그래프로 각 범죄의 요일별 발생 비율은 파악할 수 있으나,\n\n지능범죄의 주말 발생 건수가 현저히 낮아 전체 그래프에서 왜곡이 발생\n\n\n따라서, 연도 기준으로 데이터를 비교하는데 오류가 있다는 판단\n\n\n\n\n\n\n[요일 기준 범죄별 비율 비교 그래프]\n\n# 6. 요일별 전체 범죄 발생 비율 그래프\n## 요일별 전체 범죄 발생 비율표 생성\ntotal_day = crime.groupby('day') \\\n                 .agg(total_s = ('total_s', 'sum'),\n                      total_g = ('total_g', 'sum'),\n                      total_i = ('total_i', 'sum'),\n                      total = ('total', 'sum'))\n\ntotal_day = total_day.assign(\n    강력범죄 = lambda x: x['total_s'] / sum(x['total_s']) * 100,\n    폭력범죄 = lambda x: x['total_g'] / sum(x['total_g']) * 100,\n    지능범죄 = lambda x: x['total_i'] / sum(x['total_i']) * 100,\n    총_범죄율 = lambda x: x['total'] / sum(x['total']) * 100)\n\ntotal_day = total_day.reindex(index=['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'])\n\nratio_total_day = total_day.iloc[:, 4:]\nratio_total_day\n\n## 요일별 전체 범죄 발생 비율 그래프 생성\nsns.lineplot(data = ratio_total_day)\nplt.xlabel(\"요일\")\nplt.ylabel(\"비율(%)\")\nplt.title(\"요일 기준 범죄율 비교 그래프\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n결론\n\n\n\n\n강력범죄/폭력범죄는 가설에 성립하지만, 지능범죄는 반대의 결과가 도출되었다.\n\n따라서, 강력범죄는 화요일/폭력범죄는 월요일/지능범죄는 일요일이 가장 안전하다.\n\n\n\n\n\n\n\n\n\n\n생각해볼 점\n\n\n\n지능범죄가 평일에 많이 발생하는 이유는, 공공기관/기업 업무 시간에 이루어져야 하는 행위가 많기 때문이라고 추측된다.\n\n\n\n\n\n\n\n\n분석 발전 방향\n\n\n\n\n데이터 추가\n\n범죄 발생 시간 : 특정 요일의 어느 시간대에 범죄가 주로 발생하는지 분석\n사회적/경제적 요인 : 실업률, 소득 수준, 인구 밀도 등 사회적/경제적 요인으로 차이가 있는지 분석\n이벤트/축제 정보 : 특정 요일과 기간에 개최된 이벤트, 축제, 공휴일 등의 요인으로 차이가 있는지 분석"
  }
]