{
  "hash": "b11be789e9d4951401cddd693d1c9785",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"HW6\"\nauthor: \"Dakyung Lee\"\ndate: \"2024-07-30\"\njupyter: python3\n---\n\n### 데이터 정제 및 기초 그래프 생성\n\n::: {#3589deb3 .cell execution_count=1}\n``` {.python .cell-code}\n# 아래 순서는 기본 데이터 분석을 위한 준비 절차임\n# 0. 패키지 로드\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\n# 1. 데이터 로드\nraw_welfare = pd.read_spss('..\\data\\Koweps_hpwc14_2019_beta2.sav')\nwelfare = raw_welfare.copy()\n\n# 2. 데이터 검토\nwelfare.head()\nwelfare.shape\nwelfare.info()\nwelfare.describe()\n\n# 3. 변수명 변경\nwelfare = welfare.rename(\n    columns = {'h14_g3'     : 'sex',\n               'h14_g4'     : 'birth',\n               'h14_g10'    : 'marriage_type',\n               'h14_g11'    : 'religion',\n               'p1402_8aq1' : 'income',\n               'h14_eco9'   : 'code_job',\n               'h14_reg7'   : 'code_region'})\n               \nwelfare = welfare[['sex', 'birth', 'marriage_type', 'religion', 'income', 'code_job', 'code_region']]\nwelfare.head(20)\nwelfare.shape\n\n# 아래 순서는 데이터 분석을 위한 데이터 전처리 절차임\n\n# [성별에 따른 월급 차이 - 성별에 따라 월급이 다를까?]\n# (1). 성별 변수 검토 및 전처리\n# 0. 변수 검토\n# 0-1. 변수 타입 파악\nwelfare['sex'].dtypes # 변수 타입 파악\n\n# 0-2. 범주마다 몇 명이 있는지, 이상치 파악\nwelfare['sex'].value_counts() \n\n# 1. 데이터 전처리\n# 1-1. (이상치가 있다면) 이상치 결측 처리\n\n# 1-2. 이해하기 쉽도록 변수값 변경\nwelfare['sex'] = np.where(welfare['sex'] == 1, 'male', 'female')\nwelfare['sex'].value_counts()\n\n# 1-3. 빈도 막대 그래프 만들기\n#sns.countplot(data = welfare, x = 'sex', hue = 'sex')\n#plt.show()\n#plt.clf()\n\n# (2). 월급 변수 검토 및 전처리\n# 0. 변수 검토\n# 0-1. 변수 타입 파악\nwelfare['income'].dtypes\n\n# 0-2. 요약 통계량 구하기\nwelfare['income'].describe()\n\n# 0-3. 분포 확인\n#sns.histplot(data = welfare, x = 'income')\n#plt.show()\n#plt.clf()\n\n# 1. 데이터 전처리\n# 1-1. 이상치 확인, (이상치가 있다면) 이상치 결측 처리\nwelfare['income'].describe()\n\n# 1-2. 결측치 확인\nwelfare['income'].isna().sum()\n\n# 1-3. 성별 월급 평균표(요약표) 생성\nsex_income = welfare.dropna(subset = 'income') \\\n                    .groupby('sex', as_index = False) \\\n                    .agg(mean_income = ('income', 'mean'))\nsex_income\n\n# 1-4. 평균표 막대 그래프 생성\nsns.barplot(data = sex_income, x = 'sex', y = 'mean_income', hue = 'sex')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n<>:10: SyntaxWarning:\n\ninvalid escape sequence '\\d'\n\n<>:10: SyntaxWarning:\n\ninvalid escape sequence '\\d'\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_12516\\2401685048.py:10: SyntaxWarning:\n\ninvalid escape sequence '\\d'\n\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14418 entries, 0 to 14417\nColumns: 830 entries, h14_id to h14_pers_income5\ndtypes: float64(826), object(4)\nmemory usage: 91.3+ MB\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-3.png){width=593 height=429}\n:::\n:::\n\n\n### 95% 신뢰구간 그래프 생성\n\n::: {#411e4141 .cell execution_count=2}\n``` {.python .cell-code}\n# 여자 임금 테이블 생성\nfemale_income = welfare.dropna(subset = 'income') \\\n                       .query('sex == \"female\"')[[\"sex\", \"income\"]]\n                       \n# 남자 임금 테이블 생성\nmale_income = welfare.dropna(subset = 'income') \\\n                     .query('sex == \"male\"')[[\"sex\", \"income\"]]\n\n# 신뢰구간 계산\nfemale_df = female_income.agg(female_mean = ('income', 'mean'),\n                              female_std = ('income', 'std'),\n                              female_n = ('income', 'count'))\nfemale_df = female_df.transpose()\n                       \nmale_df = male_income.agg(male_mean = ('income', 'mean'),\n                          male_std = ('income', 'std'),\n                          male_n = ('income', 'count'))\nmale_df = male_df.transpose()\n\nfemale_df['f_left_ci'] = female_df['female_mean'] - 1.96 * female_df['female_std'] / np.sqrt(female_df['female_n'])\nfemale_df['f_right_ci'] = female_df['female_mean'] + 1.96 * female_df['female_std'] / np.sqrt(female_df['female_n'])\nfemale_df.head()\n\nmale_df['m_left_ci'] = male_df['male_mean'] - 1.96 * male_df['male_std'] / np.sqrt(male_df['male_n'])\nmale_df['m_right_ci'] = male_df['male_mean'] + 1.96 * male_df['male_std'] / np.sqrt(male_df['male_n'])\nmale_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>male_mean</th>\n      <th>male_std</th>\n      <th>male_n</th>\n      <th>m_left_ci</th>\n      <th>m_right_ci</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>income</th>\n      <td>349.037571</td>\n      <td>217.862254</td>\n      <td>2289.0</td>\n      <td>340.112428</td>\n      <td>357.962714</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}