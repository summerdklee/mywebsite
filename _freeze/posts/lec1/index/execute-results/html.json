{
  "hash": "24e6c8d56d8c88c0e635ed1886536033",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"LEC1\"\nauthor: \"Dakyung Lee\"\ndate: \"2024-09-10\"\njupyter: python3\n---\n\n::: {#752d8282 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nfrom sklearn.metrics import confusion_matrix, accuracy_score, f1_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n### Q1. 데이터를 로드하고, 로지스틱 회귀모델을 적합하고, 회귀 표를 작성하세요.\n\n::: {#e3b5e356 .cell execution_count=2}\n``` {.python .cell-code}\ndata = pd.read_csv('../../data/leukemia_remission.csv')\n\nX = data[['CELL', 'SMEAR', 'INFIL', 'LI', 'BLAST', 'TEMP']]\ny = data['REMISS']\n\nX = sm.add_constant(X)\n\nlogit_model = sm.Logit(y, X).fit()\n\nlogit_summary = logit_model.summary()\nprint(logit_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOptimization terminated successfully.\n         Current function value: 0.399886\n         Iterations 10\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:                 REMISS   No. Observations:                   27\nModel:                          Logit   Df Residuals:                       20\nMethod:                           MLE   Df Model:                            6\nDate:                Tue, 10 Sep 2024   Pseudo R-squ.:                  0.3718\nTime:                        10:34:25   Log-Likelihood:                -10.797\nconverged:                       True   LL-Null:                       -17.186\nCovariance Type:            nonrobust   LLR p-value:                   0.04670\n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst         64.2581     74.965      0.857      0.391     -82.670     211.187\nCELL          30.8301     52.135      0.591      0.554     -71.353     133.013\nSMEAR         24.6863     61.526      0.401      0.688     -95.903     145.275\nINFIL        -24.9745     65.281     -0.383      0.702    -152.923     102.974\nLI             4.3605      2.658      1.641      0.101      -0.849       9.570\nBLAST         -0.0115      2.266     -0.005      0.996      -4.453       4.430\nTEMP        -100.1734     77.753     -1.288      0.198    -252.567      52.220\n==============================================================================\n\nPossibly complete quasi-separation: A fraction 0.11 of observations can be\nperfectly predicted. This might indicate that there is complete\nquasi-separation. In this case some parameters will not be identified.\n```\n:::\n:::\n\n\n### Q2. 해당 모델은 통계적으로 유의한가요? 그 이유를 검정통계량를 사용해서 설명하시오.\n\n::: {#f4cb95b2 .cell execution_count=3}\n``` {.python .cell-code}\nprint(f\"Model p-value: {logit_model.llr_pvalue}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel p-value: 0.04670138920512951\n```\n:::\n:::\n\n\n### Q3. 유의수준이 0.2를 기준으로 통계적으로 유의한 변수는 몇개이며, 어느 변수 인가요?\n\n::: {#3ebb0746 .cell execution_count=4}\n``` {.python .cell-code}\nsignificant_vars = logit_model.pvalues[logit_model.pvalues < 0.2]\nprint(f\"Statistically significant variables: {significant_vars}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStatistically significant variables: LI      0.100899\nTEMP    0.197623\ndtype: float64\n```\n:::\n:::\n\n\n### Q4. 다음 환자에 대한 오즈는 얼마인가요?\n\n* CELL (골수의 세포성): 65%\n\n* SMEAR (골수편의 백혈구 비율): 45%\n\n* INFIL (골수의 백혈병 세포 침투 비율): 55%\n\n* LI (골수 백혈병 세포의 라벨링 인덱스): 1.2\n\n* BLAST (말초혈액의 백혈병 세포 수): 1.1세포/μL\n\n* TEMP (치료 시작 전 최고 체온): 0.9CELL (골수의 세포성): 65%\n\n* SMEAR (골수편의 백혈구 비율): 45%\n\n* INFIL (골수의 백혈병 세포 침투 비율): 55%\n\n* LI (골수 백혈병 세포의 라벨링 인덱스): 1.2\n\n* BLAST (말초혈액의 백혈병 세포 수): 1.1세포/μL\n\n* TEMP (치료 시작 전 최고 체온): 0.9\n\n::: {#db2ba993 .cell execution_count=5}\n``` {.python .cell-code}\npatient_values_updated = [1, 0.65, 0.45, 0.55, 1.2, 1.1, 0.9]\nlog_odds_updated = sum([coef * val for coef, val in zip(logit_model.params, patient_values_updated)])\nodds_updated = np.exp(log_odds_updated)\nprint(f\"Odds: {odds_updated}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOdds: 0.03817043186641831\n```\n:::\n:::\n\n\n### Q5. 위 환자의 혈액에서 백혈병 세포가 관측되지 않은 확률은 얼마인가요?\n\n::: {#53eeef12 .cell execution_count=6}\n``` {.python .cell-code}\nprobability_updated = 1 / (1 + np.exp(-log_odds_updated))\nprint(f\"Probability: {probability_updated}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nProbability: 0.0367670188774262\n```\n:::\n:::\n\n\n### Q6. TEMP 변수의 계수는 얼마이며, 해당 계수를 사용해서 TEMP 변수가 백혈병 치료에 대한 영향을 설명하시오.\n\n::: {#fc11b73d .cell execution_count=7}\n``` {.python .cell-code}\ntemp_coef = logit_model.params['TEMP']\nprint(f\"TEMP coefficient: {temp_coef}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTEMP coefficient: -100.17340003287605\n```\n:::\n:::\n\n\n### Q7. CELL 변수의 99% 오즈비에 대한 신뢰구간을 구하시오.\n\n::: {#5a2af473 .cell execution_count=8}\n``` {.python .cell-code}\ncell_coef = logit_model.params['CELL']\ncell_se = logit_model.bse['CELL']\nz_value_99 = 2.576  # Z-value for 99% confidence interval\nlower_bound_coef = cell_coef - z_value_99 * cell_se\nupper_bound_coef = cell_coef + z_value_99 * cell_se\nlower_bound_or = np.exp(lower_bound_coef)\nupper_bound_or = np.exp(upper_bound_coef)\nprint(f\"CELL 99% Confidence Interval for OR: ({lower_bound_or}, {upper_bound_or})\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCELL 99% Confidence Interval for OR: (1.1569618556690256e-45, 5.191962380123559e+71)\n```\n:::\n:::\n\n\n### Q8. 주어진 데이터에 대하여 로지스틱 회귀 모델의 예측 확률을 구한 후, 50% 이상인 경우 1로 처리하여, 혼동 행렬를 구하시오.\n\n::: {#e90ec2c2 .cell execution_count=9}\n``` {.python .cell-code}\npredicted_probs = logit_model.predict(X)\npredicted_classes = (predicted_probs >= 0.5).astype(int)\nconf_matrix = confusion_matrix(y, predicted_classes)\nprint(f\"Confusion Matrix:\\n{conf_matrix}\")\n\nplt.figure(figsize=(6, 4))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False,\n            xticklabels=['Actual 0', 'Actual 1'], yticklabels=['Predicted 0', 'Predicted 1'])\nplt.title('Confusion Matrix')\nplt.xlabel('Actual')\nplt.ylabel('Predicted')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix:\n[[15  3]\n [ 4  5]]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-2.png){width=506 height=376}\n:::\n:::\n\n\n### Q9. 해당 모델의 Accuracy는 얼마인가요?\n\n::: {#8a802f5a .cell execution_count=10}\n``` {.python .cell-code}\naccuracy = accuracy_score(y, predicted_classes)\nprint(f\"Accuracy: {accuracy}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy: 0.7407407407407407\n```\n:::\n:::\n\n\n### Q10. 해당 모델의 F1 Score를 구하세요.\n\n::: {#5a369a8b .cell execution_count=11}\n``` {.python .cell-code}\nf1 = f1_score(y, predicted_classes)\nprint(f\"F1 Score: {f1}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nF1 Score: 0.5882352941176471\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}